// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: order.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty.pb";

export const protobufPackage = "order";

export enum OrderStatus {
  ORDER_STATUS_UNSPECIFIED = 0,
  PROCESSING = 1,
  COMPLETED = 2,
  CANCELLED = 3,
  PENDING = 4,
  PAYMENT_FAILED = 5,
  PAYMENT_SUCCESS = 6,
  UNRECOGNIZED = -1,
}

export enum OrderWorkflowStatus {
  ORDER_WORKFLOW_STATUS_UNSPECIFIED = 0,
  ORDER_WORKFLOW_STATUS_PROCESSING = 1,
  ORDER_WORKFLOW_STATUS_COMPLETED = 2,
  ORDER_WORKFLOW_STATUS_CANCELLED = 3,
  UNRECOGNIZED = -1,
}

export interface OrderData {
  id: string;
  items: OrderItem[];
  userId: string;
  status: OrderStatus;
  totalAmount: number;
}

export interface OrderItemRequest {
  productId: string;
  quantity: number;
}

export interface OrderItem {
  productId: string;
  productName: string;
  productPrice: number;
  quantity: number;
  totalAmount: number;
}

/** Create */
export interface CreateRequest {
  items: OrderItemRequest[];
  userId: string;
}

export interface CreateResponse {
  orderId: string;
  workflowId: string;
}

/** FindOne */
export interface FindOneRequest {
  id: string;
}

export interface FindOneResponse {
  order: OrderData | undefined;
}

/** FindMany */
export interface FindManyRequest {
  userId: string;
  status: OrderStatus;
}

export interface FindManyResponse {
  orders: OrderData[];
}

/** UpdateStatus */
export interface UpdateStatusRequest {
  id: string;
  status: OrderStatus;
}

export interface OrderWorkflowParams {
  orderId: string;
  userId: string;
  items: OrderItem[];
  totalAmount: number;
}

export interface OrderWorkflowResult {
  orderId: string;
  status: string;
  errorMessage: string;
}

export const ORDER_PACKAGE_NAME = "order";

export interface OrderServiceClient {
  create(request: CreateRequest): Observable<Empty>;

  findOne(request: FindOneRequest): Observable<FindOneResponse>;

  findMany(request: FindManyRequest): Observable<FindManyResponse>;

  updateStatus(request: UpdateStatusRequest): Observable<Empty>;
}

export interface OrderServiceController {
  create(request: CreateRequest): void;

  findOne(request: FindOneRequest): Promise<FindOneResponse> | Observable<FindOneResponse> | FindOneResponse;

  findMany(request: FindManyRequest): Promise<FindManyResponse> | Observable<FindManyResponse> | FindManyResponse;

  updateStatus(request: UpdateStatusRequest): void;
}

export function OrderServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "findOne", "findMany", "updateStatus"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORDER_SERVICE_NAME = "OrderService";
