// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: product.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty.pb";

export const protobufPackage = "product";

export interface ImageData {
  id: string;
  url: string;
  isPrimary: boolean;
}

export interface CategoryData {
  id: string;
  name: string;
  slug: string;
}

export interface ProductData {
  id: string;
  name: string;
  sku: string;
  stock: number;
  price: number;
  description: string;
  active: boolean;
  categories: CategoryData[];
  images: ImageData[];
}

/** CreateProduct */
export interface CreateProductRequest {
  name: string;
  stock: number;
  price: number;
  description: string;
  categoryIds: string[];
  imageUrls: string[];
}

/** FindOne */
export interface FindByIdRequest {
  id: string;
}

export interface FindByIdResponse {
  product: ProductData | undefined;
}

/** Pagination */
export interface PaginationRequest {
  page: number;
  perPage: number;
}

export interface PaginationResponse {
  total: number;
  totalPage: number;
  currentPage: number;
  perPage: number;
  next: number;
  prev: number;
}

/** FindMany */
export interface FindManyRequest {
  pagination: PaginationRequest | undefined;
  shopId: string;
  categoryId: string;
  searchTerm: string;
}

export interface FindManyResponse {
  products: ProductData[];
  pagination: PaginationResponse | undefined;
}

/** UpdateProduct */
export interface UpdateProductRequest {
  id: string;
  name: string;
  price: number;
  description: string;
  categoryIds: string[];
  imageUrls: string[];
}

/** DecreaseStock */
export interface DecreaseStockRequest {
  id: string;
  quantity: number;
}

/** ActivateProduct */
export interface ActivateProductRequest {
  id: string;
}

/** DeleteProduct */
export interface DeleteProductRequest {
  id: string;
}

/** Category */
export interface CreateCategoryRequest {
  name: string;
}

export interface FindAllCategoriesResponse {
  categories: CategoryData[];
}

export const PRODUCT_PACKAGE_NAME = "product";

export interface ProductServiceClient {
  /** Product */

  createProduct(request: CreateProductRequest): Observable<Empty>;

  findById(request: FindByIdRequest): Observable<FindByIdResponse>;

  findMany(request: FindManyRequest): Observable<FindManyResponse>;

  updateProduct(request: UpdateProductRequest): Observable<Empty>;

  decreaseStock(request: DecreaseStockRequest): Observable<Empty>;

  activateProduct(request: ActivateProductRequest): Observable<Empty>;

  deleteProduct(request: DeleteProductRequest): Observable<Empty>;

  /** Category */

  createCategory(request: CreateCategoryRequest): Observable<Empty>;

  findAllCategories(request: Empty): Observable<FindAllCategoriesResponse>;
}

export interface ProductServiceController {
  /** Product */

  createProduct(request: CreateProductRequest): void;

  findById(request: FindByIdRequest): Promise<FindByIdResponse> | Observable<FindByIdResponse> | FindByIdResponse;

  findMany(request: FindManyRequest): Promise<FindManyResponse> | Observable<FindManyResponse> | FindManyResponse;

  updateProduct(request: UpdateProductRequest): void;

  decreaseStock(request: DecreaseStockRequest): void;

  activateProduct(request: ActivateProductRequest): void;

  deleteProduct(request: DeleteProductRequest): void;

  /** Category */

  createCategory(request: CreateCategoryRequest): void;

  findAllCategories(
    request: Empty,
  ): Promise<FindAllCategoriesResponse> | Observable<FindAllCategoriesResponse> | FindAllCategoriesResponse;
}

export function ProductServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createProduct",
      "findById",
      "findMany",
      "updateProduct",
      "decreaseStock",
      "activateProduct",
      "deleteProduct",
      "createCategory",
      "findAllCategories",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCT_SERVICE_NAME = "ProductService";
